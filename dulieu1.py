import threading
import time
import os
import json
import random
from collections import defaultdict
from datetime import datetime
from zlapi import ZaloAPI, ThreadType, Message
from zlapi.models import Mention, MultiMention, MultiMsgStyle, MessageStyle
from config import API_KEY, SECRET_KEY, IMEI, SESSION_COOKIES

reset_color = "\033[0m"
bold = "\033[1m"
do = "\033[1;31m"
xanh_la = "\033[1;32m"
vang = "\033[1;33m"
xanh_duong = "\033[1;34m"
tim = "\033[1;35m"
xanh_nhat = "\033[1;36m"

def validate_cookie(cookie_str):
    try:
        cookie = json.loads(cookie_str)
        if not isinstance(cookie, dict):
            raise ValueError()
        return cookie
    except:
        print(f"{do}‚ùå Cookie kh√¥ng h·ª£p l·ªá.{reset_color}")
        return None

class Bot(ZaloAPI):
    def __init__(self, api_key, secret_key, imei=None, session_cookies=None):
        super().__init__(api_key, secret_key, imei, session_cookies)
        self.imei = imei
        self.group_name = "?"
        self.running = False
        self.use_mention = False
        self.direct_content = None
        self.use_tagall = False
        self.tagall_message = ""

    def fetch_group_info(self):
        try:
            all_groups = self.fetchAllGroups()
            group_list = []
            for group_id, _ in all_groups.gridVerMap.items():
                group_info = super().fetchGroupInfo(group_id)
                group_name = group_info.gridInfoMap[group_id]["name"]
                group_list.append({'id': group_id, 'name': group_name})
            return group_list
        except Exception as e:
            print(f"{do}L·ªói khi l·∫•y danh s√°ch nh√≥m: {e}{reset_color}")
            return []

    def display_group_menu_grouped(self, groups):
        if not groups:
            print(f"{do}Kh√¥ng t√¨m th·∫•y nh√≥m n√†o.{reset_color}")
            return None
        grouped = defaultdict(list)
        for group in groups:
            first_letter = group['name'][0].lower()
            grouped[first_letter].append(group)

        flat_list = []
        count = 1
        for letter in sorted(grouped.keys()):
            print(f"\n{vang}--- Nh√≥m b·∫Øt ƒë·∫ßu b·∫±ng ch·ªØ '{letter.upper()}' ---{reset_color}")
            for group in sorted(grouped[letter], key=lambda x: x['name']):
                print(f"{vang}{count}. {group['name']} (ID: {group['id']}){reset_color}")
                flat_list.append(group)
                count += 1
        return flat_list

    def select_group(self):
        groups = self.fetch_group_info()
        if not groups:
            return None
        flat_list = self.display_group_menu_grouped(groups)
        if not flat_list:
            return None
        while True:
            try:
                choice = int(input(f"{tim}Nh·∫≠p s·ªë th·ª© t·ª± c·ªßa nh√≥m: {reset_color}").strip())
                if 1 <= choice <= len(flat_list):
                    self.group_name = flat_list[choice - 1]['name']
                    return flat_list[choice - 1]['id']
                print(f"{do}S·ªë kh√¥ng h·ª£p l·ªá.{reset_color}")
            except ValueError:
                print(f"{do}Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá.{reset_color}")

    def send_plain_message(self, thread_id, message_text):
        try:
            if self.use_mention:
                mention = Mention("-1", offset=0, length=len(message_text))
                self.send(Message(text=message_text, mention=mention), thread_id=thread_id, thread_type=ThreadType.GROUP)
            else:
                self.send(Message(text=message_text), thread_id=thread_id, thread_type=ThreadType.GROUP)
        except Exception as e:
            print(f"{do}L·ªói khi g·ª≠i tin nh·∫Øn: {e}{reset_color}")

    def send_direct_content(self, thread_id, delay):
        if not self.direct_content:
            print(f"{do}‚ùå N·ªôi dung tr·ªëng.{reset_color}")
            return
        self.running = True
        while self.running:
            self.send_plain_message(thread_id, self.direct_content)
            time.sleep(delay)

    def send_full_file_content(self, thread_id, delay):
        filename = "ngontreo.txt"
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                content = f.read().strip()
                if not content:
                    print(f"{do}‚ùå File r·ªóng ho·∫∑c kh√¥ng c√≥ n·ªôi dung.{reset_color}")
                    return
            self.running = True
            while self.running:
                self.send_plain_message(thread_id, content)
                time.sleep(delay)
        except FileNotFoundError:
            print(f"{do}‚ùå Kh√¥ng t√¨m th·∫•y file: ngontreo.txt{reset_color}")
        except Exception as e:
            print(f"{do}L·ªói khi g·ª≠i n·ªôi dung: {e}{reset_color}")

    def send_tagall(self, thread_id, delay):
        try:
            group_info = self.fetchGroupInfo(thread_id).gridInfoMap[thread_id]
            members = group_info.get('memVerList', [])
            if not members:
                return
            text = f"{self.tagall_message}"
            mentions = []
            offset = len(text)
            for member in members:
                parts = member.split('_', 1)
                if len(parts) != 2:
                    continue
                uid, name = parts
                mention = Mention(uid=uid, offset=offset, length=len(name) + 1, auto_format=False)
                mentions.append(mention)
                offset += len(name) + 2
            multi_mention = MultiMention(mentions)
            styles = MultiMsgStyle([
                MessageStyle(offset=0, length=len(text), style="color", color="#DB342E", auto_format=False),
                MessageStyle(offset=0, length=len(text), style="bold", size="15", auto_format=False)
            ])
            self.running = True
            while self.running:
                self.send(Message(text=text, mention=multi_mention, style=styles), thread_id=thread_id, thread_type=ThreadType.GROUP)
                time.sleep(delay)
        except Exception as e:
            print(f"{do}L·ªói tagall: {e}{reset_color}")

    def stop_sending(self):
        self.running = False
        print(f"{vang}‚õî ƒê√£ d·ª´ng g·ª≠i tin nh·∫Øn.{reset_color}")

active_accounts = []

def start_account_session():
    imei = input(f"{xanh_nhat}üì± Nh·∫≠p IMEI: {reset_color}").strip()
    while True:
        cookie_str = input(f"{xanh_nhat}üç™ Nh·∫≠p Cookie: {reset_color}").strip()
        cookie = validate_cookie(cookie_str)
        if cookie:
            break

    try:
        client = Bot(API_KEY, SECRET_KEY, imei=imei, session_cookies=cookie)
        print(f"{xanh_duong}Ch·ªçn ch·∫ø ƒë·ªô treo:{reset_color}")
        print(f"{xanh_duong}[1] G·ª≠i th∆∞·ªùng{reset_color}")
        print(f"{xanh_duong}[2] G·ª≠i c√≥ mention{reset_color}")
        print(f"{xanh_duong}[3] Treo tagall style ƒë·ªè ƒë·∫πp{reset_color}")
        mode = input(f"{tim}Ch·ªçn ch·∫ø ƒë·ªô (1, 2 ho·∫∑c 3): {reset_color}").strip()

        content_mode = None
        if mode in ['1', '2']:
            if mode == '2':
                client.use_mention = True
            print(f"{xanh_duong}Ch·ªçn ngu·ªìn n·ªôi dung:{reset_color}")
            print(f"{xanh_duong}[1] Treo theo ngontreo.txt{reset_color}")
            print(f"{xanh_duong}[2] Nh·∫≠p n·ªôi dung ri√™ng{reset_color}")
            sub = input(f"{tim}Ch·ªçn (1 ho·∫∑c 2): {reset_color}").strip()
            if sub == '2':
                direct_msg = input(f"{xanh_duong}‚úçÔ∏è Nh·∫≠p n·ªôi dung mu·ªën treo: {reset_color}").strip()
                if not direct_msg:
                    print(f"{do}‚ùå N·ªôi dung kh√¥ng h·ª£p l·ªá.{reset_color}")
                    return
                client.direct_content = direct_msg
                content_mode = 'direct'
            else:
                content_mode = 'file'
        elif mode == '3':
            client.use_tagall = True
            print(f"{xanh_duong}Ch·ªçn ngu·ªìn n·ªôi dung tagall:{reset_color}")
            print(f"{xanh_duong}[1] Treo theo ngontreo.txt{reset_color}")
            print(f"{xanh_duong}[2] Nh·∫≠p n·ªôi dung ri√™ng{reset_color}")
            sub = input(f"{tim}Ch·ªçn (1 ho·∫∑c 2): {reset_color}").strip()
            if sub == '2':
                tagall_msg = input(f"{xanh_duong}‚úçÔ∏è Nh·∫≠p n·ªôi dung tagall: {reset_color}").strip()
                if not tagall_msg:
                    print(f"{do}‚ùå N·ªôi dung kh√¥ng h·ª£p l·ªá.{reset_color}")
                    return
                client.tagall_message = tagall_msg
                content_mode = 'direct'
            else:
                try:
                    with open("ngontreo.txt", "r", encoding="utf-8") as f:
                        content = f.read().strip()
                        if not content:
                            print(f"{do}‚ùå File r·ªóng ho·∫∑c kh√¥ng c√≥ n·ªôi dung.{reset_color}")
                            return
                        client.tagall_message = content
                        content_mode = 'file'
                except Exception as e:
                    print(f"{do}‚ùå L·ªói ƒë·ªçc file: {e}{reset_color}")
                    return
        else:
            return

        thread_id = client.select_group()
        if not thread_id:
            return

        try:
            delay = float(input(f"{xanh_nhat}‚è±Ô∏è Nh·∫≠p delay (gi√¢y): {reset_color}").strip())
        except ValueError:
            delay = 60

        def reo_thread():
            if mode == '3':
                client.send_tagall(thread_id, delay)
            elif content_mode == 'direct':
                client.send_direct_content(thread_id, delay)
            else:
                client.send_full_file_content(thread_id, delay)

        t = threading.Thread(target=reo_thread, daemon=True)
        active_accounts.append({'thread': t, 'bot': client})
        t.start()

    except Exception as e:
        print(f"{do}‚ùå Cookie die ho·∫∑c l·ªói ƒëƒÉng nh·∫≠p: {e}{reset_color}")

def manage_accounts():
    while True:
        if not active_accounts:
            print(f"{do}‚ùå Kh√¥ng c√≥ acc n√†o ƒëang ch·∫°y.{reset_color}")
            return
        print(f"\n{xanh_la}üìã Danh s√°ch acc ƒëang ch·∫°y:{reset_color}")
        for idx, acc in enumerate(active_accounts, start=1):
            print(f"{vang}{idx}. IMEI: {acc['bot'].imei} | Nh√≥m: {acc['bot'].group_name}{reset_color}")
        try:
            choice = int(input(f"\n{tim}Nh·∫≠p s·ªë th·ª© t·ª± acc mu·ªën d·ª´ng (0 ƒë·ªÉ quay l·∫°i): {reset_color}").strip())
            if choice == 0:
                return
            if 1 <= choice <= len(active_accounts):
                acc = active_accounts.pop(choice - 1)
                acc['bot'].stop_sending()
            else:
                print(f"{do}S·ªë kh√¥ng h·ª£p l·ªá.{reset_color}")
        except ValueError:
            print(f"{do}Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá.{reset_color}")

def run_tool():
    os.system("clear")
    print(f"{xanh_duong}üîÑ Tool treo ƒëa t√†i kho·∫£n (G√µ 'addacc' ƒë·ªÉ th√™m acc){reset_color}")
    start_account_session()
    while True:
        user_input = input(f"{xanh_duong}‚û°Ô∏è G√µ 'addacc' ƒë·ªÉ th√™m acc, 'checkacc' ƒë·ªÉ qu·∫£n l√Ω: {reset_color}").strip().lower()
        if user_input == 'addacc':
            start_account_session()
        elif user_input == 'checkacc':
            manage_accounts()

if __name__ == "__main__":
    run_tool()
